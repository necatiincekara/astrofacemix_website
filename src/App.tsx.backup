import React, { useState, useEffect } from 'react';
import { FaBrain, FaRocket, FaLock, FaChartBar, FaStar, FaUsers, FaCheck, FaArrowRight, FaPlay, FaQuoteLeft, FaGlobe } from 'react-icons/fa';
import { motion, AnimatePresence } from 'framer-motion';
import { useTranslation } from 'react-i18next';
import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';
import LanguageDetector from 'i18next-browser-languagedetector';
import { translations } from './translations';

// i18n configuration
const resources = translations;

// Initialize i18n
i18n
  .use(LanguageDetector)
  .use(initReactI18next)
  .init({
    resources,
    fallbackLng: 'en',
    interpolation: {
      escapeValue: false
    },
    detection: {
      order: ['localStorage', 'navigator'],
      caches: ['localStorage']
    }
  });

interface FloatingParticle {
  id: number;
  x: number;
  y: number;
  size: number;
  delay: number;
}

function App() {
  const { t, i18n } = useTranslation();
  const [loading, setLoading] = useState(true);
  const [particles, setParticles] = useState<FloatingParticle[]>([]);
  const [currentTestimonial, setCurrentTestimonial] = useState(0);
  
  const currentLanguage = i18n.language;
  
  // Language switcher function
  const toggleLanguage = () => {
    const newLang = currentLanguage === 'en' ? 'tr' : 'en';
    i18n.changeLanguage(newLang);
  };

  // Ultra-Pure Loading Screen
  useEffect(() => {
    const timer = setTimeout(() => setLoading(false), 2800);
    return () => clearTimeout(timer);
  }, []);

  // Minimalist Floating Particles
  useEffect(() => {
    const newParticles = Array.from({ length: 15 }, (_, i) => ({
      id: i,
      x: Math.random() * 100,
      y: Math.random() * 100,
      size: Math.random() * 1 + 0.5,
      delay: Math.random() * 10,
    }));
    setParticles(newParticles);
  }, []);

  // Get testimonials from translation
  const testimonials = t('testimonials.items', { returnObjects: true }) as Array<{
    text: string;
    author: string;
    position: string;
    company: string;
  }>;

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentTestimonial((prev) => (prev + 1) % testimonials.length);
    }, 5000);
    return () => clearInterval(interval as NodeJS.Timeout);
  }, [testimonials.length]);

  // Solution configurations with translation keys
  const solutionKeys = ['astromix', 'facemix', 'worklife', 'workstill', 'dnatest', 'companystars'];

  if (loading) {
    return (
      <div className="min-h-screen bg-black flex items-center justify-center relative overflow-hidden">
        {/* Ultra-Minimal Loading Animation */}
        <div className="text-center">
          <motion.div
            initial={{ scale: 0.8, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            className="mb-8"
          >
            <div className="w-16 h-16 mx-auto mb-6 border-2 border-white rounded-full relative">
              <motion.div
                className="absolute inset-2 border-2 border-t-transparent border-white rounded-full"
                animate={{ rotate: 360 }}
                transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
              />
            </div>
          </motion.div>
          
          <motion.h1
            initial={{ y: 20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ delay: 0.3 }}
            className="text-2xl font-light text-white mb-4 tracking-widest"
          >
            {t('loading.title')}
          </motion.h1>
          
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.6 }}
            className="flex justify-center space-x-1"
          >
            {[0, 1, 2].map((i) => (
              <motion.div
                key={i}
                className="w-2 h-2 bg-white rounded-full"
                animate={{ opacity: [0.3, 1, 0.3] }}
                transition={{ 
                  duration: 1.5, 
                  repeat: Infinity, 
                  delay: i * 0.2 
                }}
              />
            ))}
          </motion.div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-black text-white relative overflow-hidden">
      {/* Minimal Floating Particles */}
      <div className="fixed inset-0 pointer-events-none">
        {particles.map((particle) => (
          <motion.div
            key={particle.id}
            className="absolute w-1 h-1 bg-white rounded-full opacity-20"
            style={{
              left: `${particle.x}%`,
              top: `${particle.y}%`,
              width: `${particle.size}px`,
              height: `${particle.size}px`,
            }}
            animate={{
              y: [-20, 20, -20],
              opacity: [0.1, 0.3, 0.1],
            }}
            transition={{
              duration: 8 + particle.delay,
              repeat: Infinity,
              ease: "easeInOut",
            }}
          />
        ))}
      </div>

      {/* Pure Navigation */}
      <motion.nav
        initial={{ y: -100, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        className="fixed top-0 left-0 right-0 z-50 bg-black/80 backdrop-blur-sm border-b border-white/10"
      >
        <div className="max-w-7xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <motion.div 
              className="text-xl font-bold tracking-wider"
              whileHover={{ scale: 1.05 }}
            >
              {t('loading.title')}
            </motion.div>
            
            <div className="hidden md:flex items-center space-x-8">
              {['platform', 'solutions', 'enterprise', 'about'].map((item) => (
                <motion.a
                  key={item}
                  href="#"
                  className="text-sm font-medium tracking-wide hover:text-white/70 transition-colors"
                  whileHover={{ y: -2 }}
                >
                  {t(`nav.${item}`)}
                </motion.a>
              ))}
            </div>
            
            <div className="flex items-center space-x-4">
              {/* Language Switcher */}
              <motion.button
                onClick={toggleLanguage}
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                className="flex items-center px-3 py-2 border border-white/30 text-white hover:border-white transition-all duration-300 text-sm font-medium tracking-wide"
              >
                <FaGlobe className="mr-2" />
                {currentLanguage.toUpperCase()}
              </motion.button>
              
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                className="px-6 py-2 border border-white text-white hover:bg-white hover:text-black transition-all duration-300 text-sm font-medium tracking-wide"
              >
                {t('nav.accessPlatform')}
              </motion.button>
            </div>
          </div>
        </div>
      </motion.nav>

      {/* Hero Section - Ultimate Minimalism */}
      <section className="min-h-screen flex items-center justify-center relative pt-20">
        <div className="max-w-6xl mx-auto px-6 text-center">
          <motion.div
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 1 }}
            className="mb-8"
          >
            <motion.h1
              className="text-6xl md:text-8xl font-extralight mb-6 tracking-wider leading-none"
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ duration: 1.2, delay: 0.2 }}
            >
              {t('hero.title')}
              <br />
              <span className="font-light">{t('hero.subtitle')}</span>
            </motion.h1>
            
            <motion.p
              className="text-lg md:text-xl text-white/70 max-w-3xl mx-auto mb-12 font-light leading-relaxed"
              initial={{ opacity: 0, y: 30 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 1, delay: 0.4 }}
            >
              {t('hero.description')}
            </motion.p>
          </motion.div>

          <motion.div
            className="flex flex-col sm:flex-row items-center justify-center gap-6 mb-16"
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 1, delay: 0.6 }}
          >
            <motion.button
              whileHover={{ scale: 1.05, backgroundColor: "#ffffff", color: "#000000" }}
              whileTap={{ scale: 0.95 }}
              className="px-8 py-4 bg-black border-2 border-white text-white font-medium tracking-wider transition-all duration-300 group"
              onClick={() => {
                // Smooth scroll to contact section or show contact modal
                const contactSection = document.getElementById('contact');
                if (contactSection) {
                  contactSection.scrollIntoView({ behavior: 'smooth' });
                } else {
                  alert(t('hero.requestConsultation') + ' - Contact: info@astrofacemix.com');
                }
              }}
            >
              <span className="flex items-center">
                {t('hero.requestConsultation')}
                <FaArrowRight className="ml-2 group-hover:translate-x-1 transition-transform" />
              </span>
            </motion.button>
            
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              className="px-8 py-4 text-white border border-white/30 hover:border-white transition-all duration-300 group"
              onClick={() => {
                // Open demo video or redirect to demo page
                window.open('https://astrofacemix.com/demo', '_blank');
              }}
            >
              <span className="flex items-center">
                <FaPlay className="mr-2 group-hover:scale-110 transition-transform" />
                {t('hero.platformDemo')}
              </span>
            </motion.button>
          </motion.div>

          {/* Minimal Stats */}
          <motion.div
            className="grid grid-cols-3 gap-8 max-w-2xl mx-auto"
            initial={{ opacity: 0, y: 40 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 1, delay: 0.8 }}
          >
            {[
              { value: '99.9%', key: 'accuracy' },
              { value: '10x', key: 'performance' },
              { value: '24/7', key: 'support' }
            ].map((stat, index) => (
              <motion.div
                key={index}
                className="text-center"
                whileHover={{ scale: 1.05 }}
              >
                <div className="text-2xl md:text-3xl font-light mb-2">{stat.value}</div>
                <div className="text-sm text-white/60 tracking-wide">{t(`hero.stats.${stat.key}`)}</div>
              </motion.div>
            ))}
          </motion.div>
        </div>
      </section>

      {/* Core Capabilities - Pure Minimalism */}
      <section className="py-24 relative">
        <div className="max-w-7xl mx-auto px-6">
          <motion.div
            className="text-center mb-20"
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
          >
            <h2 className="text-3xl md:text-5xl font-extralight mb-6 tracking-wider">
              {t('capabilities.title')}
            </h2>
            <p className="text-lg text-white/70 max-w-2xl mx-auto font-light">
              {t('capabilities.description')}
            </p>
          </motion.div>

          <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-8">
            {[
              { icon: FaBrain, key: 'analytics' },
              { icon: FaRocket, key: 'performance' },
              { icon: FaLock, key: 'security' },
              { icon: FaChartBar, key: 'intelligence' }
            ].map((feature, index) => (
              <motion.div
                key={index}
                className="text-center p-6 border border-white/10 hover:border-white/30 transition-all duration-500 group"
                initial={{ opacity: 0, y: 30 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8, delay: index * 0.1 }}
                whileHover={{ y: -10, scale: 1.02 }}
              >
                <motion.div
                  className="mb-6"
                  whileHover={{ scale: 1.1 }}
                  transition={{ type: "spring", stiffness: 300 }}
                >
                  <feature.icon className="w-8 h-8 mx-auto text-white group-hover:text-white/80 transition-colors" />
                </motion.div>
                <h3 className="text-lg font-medium mb-4 tracking-wide">{t(`capabilities.features.${feature.key}.title`)}</h3>
                <p className="text-white/70 text-sm leading-relaxed font-light">{t(`capabilities.features.${feature.key}.description`)}</p>
              </motion.div>
            ))}
          </div>
        </div>
      </section>

      {/* Enterprise Solutions */}
      <section className="py-24 bg-white text-black relative">
        <div className="max-w-7xl mx-auto px-6">
          <motion.div
            className="text-center mb-20"
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
          >
            <h2 className="text-3xl md:text-5xl font-extralight mb-6 tracking-wider">
              {t('enterprise.title')}
            </h2>
            <p className="text-lg text-black/70 max-w-2xl mx-auto font-light">
              {t('enterprise.description')}
            </p>
          </motion.div>

          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
            {solutionKeys.map((solutionKey, index) => {
              const features = t(`enterprise.solutions.${solutionKey}.features`, { returnObjects: true }) as string[];
              
              return (
                <motion.div
                  key={index}
                  className="p-8 border border-black/10 hover:border-black/30 transition-all duration-500 group bg-white"
                  initial={{ opacity: 0, y: 30 }}
                  whileInView={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.8, delay: index * 0.1 }}
                  whileHover={{ y: -5, boxShadow: "0 10px 30px rgba(0,0,0,0.1)" }}
                >
                  <div className="mb-6">
                    <h3 className="text-xl font-medium mb-2 tracking-wider">{t(`enterprise.solutions.${solutionKey}.title`)}</h3>
                    <p className="text-sm text-black/60 mb-4 font-light tracking-wide">{t(`enterprise.solutions.${solutionKey}.subtitle`)}</p>
                    <p className="text-black/80 text-sm leading-relaxed mb-6 font-light">{t(`enterprise.solutions.${solutionKey}.description`)}</p>
                  </div>
                  
                  <div className="space-y-2">
                    {features.map((feature, idx) => (
                      <div key={idx} className="flex items-center text-sm">
                        <FaCheck className="w-3 h-3 mr-3 text-black/60" />
                        <span className="font-light">{feature}</span>
                      </div>
                    ))}
                  </div>
                  
                  <motion.button
                    className="mt-6 text-sm font-medium tracking-wide hover:text-black/70 transition-colors group"
                    whileHover={{ x: 5 }}
                    onClick={() => {
                      // Redirect to solution detail page or show modal
                      window.open(`https://astrofacemix.com/solutions/${solutionKey}`, '_blank');
                    }}
                  >
                    {t('enterprise.learnMore')} <FaArrowRight className="inline ml-2 text-xs" />
                  </motion.button>
                </motion.div>
              );
            })}
          </div>
        </div>
      </section>

      {/* Client Testimonials */}
      <section className="py-24 relative">
        <div className="max-w-4xl mx-auto px-6 text-center">
          <motion.div
            className="mb-16"
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
          >
            <h2 className="text-3xl md:text-5xl font-extralight mb-6 tracking-wider">
              {t('testimonials.title')}
            </h2>
            <p className="text-lg text-white/70 font-light">
              {t('testimonials.description')}
            </p>
          </motion.div>

          <AnimatePresence mode="wait">
            <motion.div
              key={currentTestimonial}
              initial={{ opacity: 0, y: 30 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -30 }}
              transition={{ duration: 0.8 }}
              className="mb-12"
            >
              <FaQuoteLeft className="w-8 h-8 mx-auto mb-8 text-white/40" />
              <blockquote className="text-xl md:text-2xl font-light mb-8 leading-relaxed">
                "{testimonials[currentTestimonial]?.text}"
              </blockquote>
              <div className="text-center">
                <div className="font-medium text-lg mb-1">{testimonials[currentTestimonial]?.author}</div>
                <div className="text-white/70 text-sm mb-1 font-light">{testimonials[currentTestimonial]?.position}</div>
                <div className="text-white/60 text-sm font-light">{testimonials[currentTestimonial]?.company}</div>
              </div>
            </motion.div>
          </AnimatePresence>

          {/* Testimonial Indicators */}
          <div className="flex justify-center space-x-2">
            {testimonials.map((_, index) => (
              <button
                key={index}
                className={`w-2 h-2 rounded-full transition-all duration-300 ${
                  index === currentTestimonial ? 'bg-white' : 'bg-white/30'
                }`}
                onClick={() => setCurrentTestimonial(index)}
                aria-label={`Go to testimonial ${index + 1}`}
              />
            ))}
          </div>
        </div>
      </section>

      {/* Call to Action - Pure Minimalism */}
      <section className="py-24 bg-white text-black" id="contact">
        <div className="max-w-4xl mx-auto px-6 text-center">
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
          >
            <h2 className="text-3xl md:text-5xl font-extralight mb-8 tracking-wider">
              {t('cta.title')}
            </h2>
            <p className="text-lg text-black/70 mb-12 max-w-2xl mx-auto font-light leading-relaxed">
              {t('cta.description')}
            </p>
            
            <motion.button
              whileHover={{ scale: 1.05, backgroundColor: "#000000", color: "#ffffff" }}
              whileTap={{ scale: 0.95 }}
              className="px-12 py-4 bg-white border-2 border-black text-black font-medium tracking-wider transition-all duration-300 text-lg"
              onClick={() => {
                // Open contact form or redirect to contact page
                window.location.href = 'mailto:info@astrofacemix.com?subject=' + encodeURIComponent(t('cta.button'));
              }}
            >
              {t('cta.button')}
            </motion.button>
          </motion.div>
        </div>
      </section>

      {/* Footer - Minimal Excellence */}
      <footer className="py-16 border-t border-white/10">
        <div className="max-w-7xl mx-auto px-6">
          <div className="grid md:grid-cols-4 gap-8 mb-12">
            <div className="col-span-2">
              <h3 className="text-2xl font-bold mb-4 tracking-wider">{t('footer.title')}</h3>
              <p className="text-white/70 mb-6 font-light leading-relaxed max-w-md">
                {t('footer.description')}
              </p>
              <div className="flex space-x-4">
                {[FaUsers, FaStar, FaLock].map((Icon, index) => (
                  <motion.div
                    key={index}
                    whileHover={{ scale: 1.1 }}
                    className="w-10 h-10 border border-white/20 flex items-center justify-center hover:border-white/40 transition-colors cursor-pointer"
                    onClick={() => {
                      // Social media links
                      const socialLinks = [
                        'https://linkedin.com/company/astrofacemix',
                        'https://twitter.com/astrofacemix', 
                        'https://facebook.com/astrofacemix'
                      ];
                      window.open(socialLinks[index], '_blank');
                    }}
                  >
                    <Icon className="w-4 h-4" />
                  </motion.div>
                ))}
              </div>
            </div>
            
            <div>
              <h4 className="font-medium mb-4 tracking-wide">{t('footer.platform.title')}</h4>
              <ul className="space-y-2 text-sm text-white/70 font-light">
                {(t('footer.platform.items', { returnObjects: true }) as string[]).map((item, index) => (
                  <li key={index}>
                    <a href="#" className="hover:text-white transition-colors" onClick={(e) => {
                      e.preventDefault();
                      // Navigate to specific platform section
                      alert(`${item} - Coming Soon!`);
                    }}>
                      {item}
                    </a>
                  </li>
                ))}
              </ul>
            </div>
            
            <div>
              <h4 className="font-medium mb-4 tracking-wide">{t('footer.enterprise.title')}</h4>
              <ul className="space-y-2 text-sm text-white/70 font-light">
                {(t('footer.enterprise.items', { returnObjects: true }) as string[]).map((item, index) => (
                  <li key={index}>
                    <a href="#" className="hover:text-white transition-colors" onClick={(e) => {
                      e.preventDefault();
                      // Navigate to specific enterprise service
                      window.location.href = `mailto:enterprise@astrofacemix.com?subject=${encodeURIComponent(item)}`;
                    }}>
                      {item}
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          </div>
          
          <div className="border-t border-white/10 pt-8 flex flex-col md:flex-row justify-between items-center">
            <p className="text-white/60 text-sm font-light">
              {t('footer.copyright')}
            </p>
            <div className="flex space-x-6 mt-4 md:mt-0">
              {(t('footer.links', { returnObjects: true }) as string[]).map((link, index) => (
                <a 
                  key={index}
                  href="#" 
                  className="text-white/60 hover:text-white text-sm transition-colors font-light"
                  onClick={(e) => {
                    e.preventDefault();
                    // Navigate to legal pages
                    alert(`${link} - Page coming soon!`);
                  }}
                >
                  {link}
                </a>
              ))}
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
}

export default App; 